(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{446:function(t,e,r){"use strict";r.r(e);r(39),r(30),r(38),r(52),r(31),r(53);var n=r(20),o=(r(122),r(47),r(77),r(124),r(213),r(14),r(70));function c(object,t){var e=Object.keys(object);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(object);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(object,t).enumerable}))),e.push.apply(e,r)}return e}function l(t){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?c(Object(source),!0).forEach((function(e){Object(n.a)(t,e,source[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(source)):c(Object(source)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(source,e))}))}return t}var m={data:function(){return{temporaryParameters:{goTerm:""},parameters:{go:[]},autoComplete:{go:[]},debounce:null}},computed:l(l({},Object(o.b)({activeDataset:"active_dataset"})),{},{goTermString:function(){return this.parameters.go.map((function(t){return t.id})).join(", ")},placeholderGOTerm:function(){return""===this.temporaryParameters.goTerm&&this.parameters.go.length<1?"transcription factor binding":""}}),watch:{activeDataset:function(){this.parameters={go:[]}},parameters:function(){this.$emit("updateParameters",{go:this.goTermString})}},methods:{updateAutoComplete:function(){var t=this;clearTimeout(this.debounce);var e='{ goSuggest (text: "'.concat(this.temporaryParameters.goTerm,'", dataset: "').concat(this.activeDataset.dataset,'") { goId, goTerm }}');this.debounce=setTimeout((function(){t.$axios.$post("gql",{query:e}).then((function(e){var r,n;t.$set(t.autoComplete,"go",null===(r=e.data)||void 0===r||null===(n=r.goSuggest)||void 0===n?void 0:n.map((function(a){return{text:a.goTerm,id:a.goId}})))})).catch((function(){return console.warn("Oh. Something went wrong")}))}),300)},handleSingleTagUpdate:function(t,text){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:["ti-valid"],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"go";this.parameters[r].find((function(e){return e.id===t}))||(this.$set(this.temporaryParameters,"goTerm",""),this.setTags([{id:t,text:text,tiClasses:e}],r))},setTags:function(t,e){this.parameters=l(l({},this.parameters),{},Object(n.a)({},e,t))}}},d=m,f=r(35),component=Object(f.a)(d,(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",[r("h3",[t._v("\n    Genes with GO Term\n    "),r("span",{staticClass:"example"},[t._v("e.g.\n      "),r("span",{staticClass:"sample_value",on:{click:function(e){return t.handleSingleTagUpdate("GO:0008134","transcription factor binding")}}},[t._v("transcription factor binding")]),t._v(",\n      "),r("span",{staticClass:"sample_value",on:{click:function(e){return t.handleSingleTagUpdate("GO:0030154","cell differentiation")}}},[t._v("cell differentiation\n      ")])])]),t._v(" "),r("no-ssr",[r("vue-tags-input",{attrs:{tags:t.parameters.go,"autocomplete-items":t.autoComplete.go,"add-only-from-autocomplete":"",placeholder:t.placeholderGOTerm},on:{input:t.updateAutoComplete,"tags-changed":function(e){return t.setTags(e,"go")}},scopedSlots:t._u([{key:"autocomplete-item",fn:function(e){var n=e.item;return r("div",{staticClass:"my-item",domProps:{innerHTML:t._s(t.$highlightedSuggestion(n.text,t.temporaryParameters.goTerm))},on:{click:function(e){return t.handleSingleTagUpdate(n.id,n.text)}}})}}]),model:{value:t.temporaryParameters.goTerm,callback:function(e){t.$set(t.temporaryParameters,"goTerm",e)},expression:"temporaryParameters.goTerm"}})],1)],1)}),[],!1,null,null,null);e.default=component.exports}}]);